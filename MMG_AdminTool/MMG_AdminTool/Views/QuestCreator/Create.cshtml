@using MMG_AdminTool.Models
@using MMG_AdminTool.Models.Enums
@model MMG_AdminTool.Models.QuestViewModel

@{
    ViewData["Title"] = "Create Quest";
}

<h2>Create New Quest</h2>

<div asp-validation-summary="All" class="text-danger"></div>

<form asp-action="Create" method="post">
    <div class="form-group mt-2">
        <label asp-for="Title" class="control-label">Title</label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="form-group mt-2">
        <label asp-for="Description" class="control-label">Description</label>
        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="form-group mt-2">
        <label asp-for="IconCode" class="control-label">Icon Code</label>
        <input asp-for="IconCode" class="form-control" />
        <span asp-validation-for="IconCode" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Type" class="control-label"></label>
        <select asp-for="Type" class="form-control" asp-items="Html.GetEnumSelectList<QuestType>()"></select>
    </div>
    <div class="form-group mt-2">
        <label asp-for="SortOrder" class="control-label">Sort Order</label>
        <input asp-for="SortOrder" class="form-control" />
        <span asp-validation-for="SortOrder" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="MinLevel" class="control-label"></label>
        <input asp-for="MinLevel" class="form-control"
               type="number" min="1" max="200"
               onchange="validateMinLevel(this)" />
        <span asp-validation-for="MinLevel" class="text-danger"></span>
    </div>

    <h5>선행 퀘스트</h5>
    <table class="table">
        <thead>
            <tr>
                <th>Quest Id</th>
                <th>Title</th>
                <th>Min Level</th>
            </tr>
        </thead>
        <tbody id="selected-prev-quests">
            @foreach (var quest in Model.SelectedPrevQuests)
            {
                    <tr>
                        <td>@quest.QuestId</td>
                        <td>@quest.Title</td>
                        <td>@quest.MinLevel</td>
                    </tr>
            }
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" onclick="showModal('prevQuestModal')">+ 선행 퀘스트 추가</button>

    <h5>퀘스트 목표</h5>
    <table class="table">
        <thead>
            <tr>
                <th>QuestGoalType</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody id="selected-goal-quests">
            @foreach(var quest in Model.QuestGoals)
            {
                <tr>
                    <td>@quest.GoalType</td>
                    <td>@quest.TargetId</td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" class="btn btn-primary" onclick="showModal('goalModal')">+ 퀘스트 목표 추가</button>
    
    <div class="form-group mt-2">
        <label asp-for="EXP" class="control-label">EXP</label>
        <input asp-for="EXP" class="form-control" />
        <span asp-validation-for="EXP" class="text-danger"></span>
    </div>

   <h5>퀘스트 보상</h5>
<table class="table">
  <thead>
    <tr>
      <th>ItemName</th>
      <th>Count</th>
      <th></th>
    </tr>
  </thead>
  <tbody id="selected-reward-items">
  </tbody>
</table>

<button type="button" class="btn btn-primary" onclick="showModal('rewardModal')">
  + 퀘스트 보상 추가
</button>

    <div class="form-group mt-2">
        <label asp-for="StartTriggerType" class="control-label">Start Trigger</label>
        <select asp-for="StartTriggerType" class="form-control"
        asp-items="Html.GetEnumSelectList<QuestTriggerType>()"
            onchange="toggleTriggerNpcField('StartTriggerType', 'start-npc-id-container')"></select>
    </div>

    <div id="start-npc-id-container" class="form-group mt-2" style="display:none;">
        <label class="control-label">Start NPC</label>
        <div class="input-group">
            <input id="StartNpcId" name="StartNpcId" class="form-control" readonly />
            <button type="button" class="btn btn-secondary" onclick="openNpcSelector('StartNpcId')">선택</button>
            </div>
    </div>

    <div class ="form-group mt-2">
        <label asp-for="EndTriggerType" class="control-label">End Trigger</label>
        <select asp-for="EndTriggerType" class="form-control"
        asp-items="Html.GetEnumSelectList<QuestTriggerType>()"
            onchange="toggleTriggerNpcField('EndTriggerType', 'end-npc-id-container')">
        </select>
    </div>

    <div id="end-npc-id-container" class="form-group mt-2" style="display:none;">
    <label class="control-label">End NPC</label>
    <div class="input-group">
        <input id="EndNpcId" name="EndNpcId" class="form-control" readonly />
        <button type="button" class="btn btn-secondary" onclick="openNpcSelector('EndNpcId')">선택</button>
    </div>
</div>

    <button type="submit" class="btn btn-success mt-3">Save</button>
    <a asp-action="Index" class="btn btn-secondary mt-3">Cancel</a>

    <input type="hidden" name="PrevQuestIds" id="PrevQuestIds" />
</form>



<!-- StartNpcId는 ReadOnly로 표시 -->
<div id="start-npc-id-container" class="form-group mt-2" style="display:none;">
    <label asp-for="StartNpcId" class="control-label">Start NPC Id (선택창으로 입력)</label>
    <div class="input-group">
        <input asp-for="StartNpcId" class="form-control" readonly />
        <button type="button" class="btn btn-secondary" onclick="openNpcSelector('StartNpcId')">NPC 선택</button>
    </div>
</div>
@section Scripts {
<script>
// ===================== 공용 유틸 =====================
function showModal(id){
  const el = document.getElementById(id);
  new bootstrap.Modal(el).show();
}
function hideModal(id){
  const inst = bootstrap.Modal.getInstance(document.getElementById(id));
  if (inst) inst.hide();
}

// 숫자 입력 보정 (MinLevel)
function validateMinLevel(input) {
  let value = parseInt(input.value);
  if (isNaN(value) || value < 1) input.value = 1;
  else if (value > 200) input.value = 200;
}

// 트리거 선택 시 NPC 입력창 토글 (전달한 이름 기준으로 읽기)
function toggleTriggerNpcField(triggerName, containerId){
  const select = document.querySelector(`[name="${triggerName}"]`);
  const val = parseInt(select?.value ?? '-1');
  document.getElementById(containerId).style.display = (val === 1 ? 'block' : 'none');
}

// 초기 표시 상태 세팅
window.addEventListener('DOMContentLoaded', () => {
  toggleTriggerNpcField('StartTriggerType','start-npc-id-container');
  toggleTriggerNpcField('EndTriggerType','end-npc-id-container');
});

// ===================== 선행 퀘스트 모달 =====================
// ModalOptions.Buttons에서 Id="btn-apply-prev-quests" 로 설정되어 있음
document.addEventListener('click', function(e){
  if (e.target && e.target.id === 'btn-apply-prev-quests'){
    const body = document.querySelector('#prevQuestModal .modal-body');
    const checked = body.querySelectorAll('input[type="checkbox"]:checked');

    const ids = [];
    const tbody = document.getElementById('selected-prev-quests');
    tbody.innerHTML = '';

    checked.forEach(cb => {
      const row = cb.closest('tr');
      const questId  = cb.value;
      const title    = row.children[2].innerText;
      const minLevel = row.children[3].innerText;

      ids.push(questId);
      tbody.insertAdjacentHTML('beforeend',
        `<tr><td>${questId}</td><td>${title}</td><td>${minLevel}</td></tr>`);
    });

    // 숨은 필드에 저장
    document.getElementById('PrevQuestIds').value = ids.join(',');
    hideModal('prevQuestModal');
  }
});

// ===================== NPC 선택 모달 =====================
let currentTargetNpcInputId = null;

// 폼에서 "선택" 버튼이 이 함수를 부름 (StartNpcId/EndNpcId 전달)
function openNpcSelector(inputId){
  currentTargetNpcInputId = inputId;
  showModal('npcModal');
}

// _NpcSelector.cshtml의 각 행 버튼에서 이 함수를 호출하게 해주세요.
function selectNpcFromModal(npcId, npcName){
  const input = document.getElementById(currentTargetNpcInputId);
  if (input) input.value = npcId;

  // 이름 표시 영역이 있으면 함께 업데이트 (선택 사항)
  const nameLabel = document.getElementById(currentTargetNpcInputId + '_name');
  if (nameLabel) nameLabel.innerText = npcName;

  hideModal('npcModal');
}

// =================== 퀘스트 목표 선택 모달 ================================
const goals = window.goals || [];
window.goals = goals;
   function renderGoals(){
  const tbody = document.getElementById('selected-goal-quests');
  tbody.innerHTML = '';
   goals.forEach((g, i) => {
    const typeName = (g.goalType === 0 ? 'HuntMonster' : 'GetItem');
        const nameOrId = g.targetName; // 이름 우선

    tbody.insertAdjacentHTML('beforeend', `
      <tr>
        <td>${typeName}</td>
        <td>${nameOrId} x ${g.count}</td>
        <td class="text-end">
          <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeGoal(${i})">삭제</button>
        </td>
      </tr>
    `);
  });

      syncGoalHiddenInputs();
    }

    function removeGoal(i){
      goals.splice(i,1);
      renderGoals();
    }

    function syncGoalHiddenInputs(){
      // 서버로 전송하려면 메인 form 안 어딘가에 컨테이너 필요
      let box = document.getElementById('goalHiddenBox');
      if (!box){
        box = document.createElement('div');
        box.id = 'goalHiddenBox';
        document.querySelector('form').appendChild(box);
      }
      box.innerHTML = '';
      goals.forEach((g,i)=>{
        box.insertAdjacentHTML('beforeend', `
          <input type="hidden" name="QuestGoals[${i}].GoalType" value="${g.goalType}">
          <input type="hidden" name="QuestGoals[${i}].TargetId" value="${g.targetId}">
          <input type="hidden" name="QuestGoals[${i}].Count" value="${g.count}">
        `);
      });
    }

    // “추가” 버튼 (ModalOptions에서 Id="btn-add-goal")
        document.addEventListener('click', function(e){
      if (e.target && e.target.id === 'btn-add-goal'){
        const body   = document.querySelector('#goalModal .modal-body');
        const type   = parseInt(body.querySelector('#goal-type').value);
        const count  = parseInt(body.querySelector('#goal-count').value) || 1;
        const selected = body.querySelector('input[name="goal-target"]:checked');
        if (!selected){ alert('대상을 선택하세요.'); return; }

        const targetId   = parseInt(selected.value);
        const targetName = selected.dataset.name || '';

        goals.push({ goalType: type, targetId, targetName, count });
        renderGoals();
        hideModal('goalModal');
      }
    });

    // 초기 1회 렌더
    renderGoals();

    // 보상 추가 버튼
document.addEventListener('click', function(e){
  if (e.target && e.target.id === 'btn-add-reward'){
    const body = document.querySelector('#rewardModal .modal-body');
    const selected = body?.querySelector('input[name="reward-target"]:checked');
    if (!selected){
      alert('보상 아이템을 선택하세요.');
      return;
    }
    const itemId = parseInt(selected.value);
    const itemName = selected.dataset.name || '';
    const count = parseInt(body.querySelector('#reward-count')?.value || '1');
    if (!Number.isFinite(itemId) || itemId <= 0){ alert('잘못된 아이템입니다.'); return; }
    if (!Number.isFinite(count) || count <= 0){ alert('개수는 1 이상이어야 합니다.'); return; }

    rewards.push({ itemId, itemName, count });
    renderRewards();
    hideModal('rewardModal');
  }
});
window.addEventListener('DOMContentLoaded', renderRewards);


    // ===== 보상 상태 =====
const rewards = window.rewards || [];
window.rewards = rewards;

// 보상 테이블 렌더
function renderRewards(){
  const tbody = document.getElementById('selected-reward-items');
  if (!tbody) return;
  tbody.innerHTML = '';
  rewards.forEach((r, i) => {
    const name = r.itemName || r.itemId;
    tbody.insertAdjacentHTML('beforeend', `
      <tr>
        <td>${name}</td>
        <td>${r.count}</td>
        <td class="text-end">
          <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeReward(${i})">삭제</button>
        </td>
      </tr>
    `);
  });
  syncRewardHiddenInputs();
}
function removeReward(idx){
  rewards.splice(idx, 1);
  renderRewards();
}
function syncRewardHiddenInputs(){
  let box = document.getElementById('rewardHiddenBox');
  if (!box){
    box = document.createElement('div');
    box.id = 'rewardHiddenBox';
    document.querySelector('form')?.appendChild(box);
  }
  box.innerHTML = '';
  rewards.forEach((r, i) => {
    box.insertAdjacentHTML('beforeend', `
      <input type="hidden" name="Rewards[${i}].ItemId" value="${r.itemId}">
      <input type="hidden" name="Rewards[${i}].Count"  value="${r.count}">
    `);
  });
}
</script>
}


@{
    var prevQuestModal = new ModalOptions {
        Id = "prevQuestModal",
        Title = "선행 퀘스트 선택",
        Size = ModalSize.Lg,
        BodyPartialView = "_PrevQuestSelector",
        BodyModel = Model.AllQuests,
        Buttons = new List<ModalButton> {
            new ModalButton { Text="닫기", CssClass="btn btn-secondary", DismissOnClick=true },
            new ModalButton { Text="확인", CssClass="btn btn-primary", Id="btn-apply-prev-quests" }
        }
            };
    var npcModal = new ModalOptions
            {
                Id = "npcModal",
                Title = "NPC 선택",
                Size = ModalSize.Md,
                BodyPartialView = "_NpcSelector",
                BodyModel = Model.AllNpcs,
                Buttons = new List<ModalButton>
        {
            new ModalButton { Text = "닫기", CssClass = "btn btn-secondary", DismissOnClick = true }
        }
            };

    var goalModal = new ModalOptions {
        Id = "goalModal",
        Title = "퀘스트 목표 추가",
        Size = ModalSize.Xl, // 목록이 길면 넓게
        BodyPartialView = "_GoalSelector",
        BodyModel = new GoalSelectorViewModel {
            Monsters = Model.AllMonsters, // 컨트롤러에서 채워 넣은 리스트
            Items    = Model.AllItems
        },
        Buttons = new List<ModalButton> {
            new ModalButton { Text="닫기", CssClass="btn btn-secondary", DismissOnClick=true },
            new ModalButton { Text="추가", CssClass="btn btn-primary", Id="btn-add-goal" }
        }
    };

    var rewardModal = new ModalOptions {
        Id = "rewardModal",
        Title = "퀘스트 보상 추가",
        Size = ModalSize.Xl,
        BodyPartialView = "_RewardSelector",
        BodyModel = new RewardItemViewModel
        {
            Items = Model.AllItems
        },
        Buttons = new List<ModalButton>
        {
            new ModalButton { Text="닫기", CssClass="btn btn-secondary", DismissOnClick=true },
            new ModalButton { Text="추가", CssClass="btn btn-primary", Id="btn-add-reward" }
        }
            };
}
<partial name="Modal" model="prevQuestModal" />
<partial name="Modal" model="npcModal" />
<partial name="Modal" model="goalModal" />
<partial name="Modal" model="rewardModal" />